🛠️ Zukunftssichere Lösung für Profilbild-Upload
Bitte implementiere folgendes System für den Upload von Profilbildern:

1. Maximalgröße & Format prüfen
Im Frontend beim Upload:

tsx
Kopieren
Bearbeiten
// utils/imageUtils.ts
export const validateImage = (file: File) => {
  const maxSizeInMB = 1;
  const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
  if (!allowedTypes.includes(file.type)) {
    return { valid: false, error: 'Nur JPG, PNG oder WEBP erlaubt.' };
  }
  if (file.size > maxSizeInMB * 1024 * 1024) {
    return { valid: false, error: 'Bild ist zu groß. Maximal 1 MB.' };
  }
  return { valid: true };
};
Dann in der Upload-Komponente:

tsx
Kopieren
Bearbeiten
import { validateImage } from '@/utils/imageUtils';

const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
  const file = e.target.files?.[0];
  if (!file) return;

  const validation = validateImage(file);
  if (!validation.valid) {
    alert(validation.error);
    return;
  }

  // Optional: Bild komprimieren (siehe Punkt 2)
  // Upload zu Firebase Storage → siehe Punkt 3
};
2. Optional: Bild komprimieren (z. B. mit browser-image-compression)
Installiere zuerst das Paket:

bash
Kopieren
Bearbeiten
npm install browser-image-compression
Dann:

tsx
Kopieren
Bearbeiten
import imageCompression from 'browser-image-compression';

const compressedFile = await imageCompression(file, {
  maxSizeMB: 0.5,
  maxWidthOrHeight: 600,
  useWebWorker: true,
});
3. Upload in Firebase Storage
ts
Kopieren
Bearbeiten
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';

const storage = getStorage();
const imageRef = ref(storage, `profilePictures/${userId}.jpg`);

await uploadBytes(imageRef, compressedFile);
const downloadUrl = await getDownloadURL(imageRef);

// Danach Profil updaten mit dem URL
await updateUserProfile({ photoURL: downloadUrl });
4. Backend-Absicherung (falls vorhanden)
Stelle sicher, dass photoURL nur als URL gespeichert wird – niemals als Base64 oder raw-File. Max. Länge prüfen.