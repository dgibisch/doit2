✅ Ziel: Bild komprimieren, korrekt in Firebase Storage hochladen, URL speichern
📁 Datei: firebase.ts
🔧 Schritt 1 – uploadUserAvatar() richtig implementieren:
ts
Kopieren
Bearbeiten
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";

// Komprimierte Datei als Blob übergeben
export const uploadUserAvatar = async (file: File, userId: string): Promise<string> => {
  const storage = getStorage();
  const storageRef = ref(storage, `avatars/${userId}-${file.name}`);
  const snapshot = await uploadBytes(storageRef, file);
  const downloadUrl = await getDownloadURL(snapshot.ref);
  return downloadUrl;
};
📁 Datei: ProfileScreen.tsx (und ähnliche wie InitialSetupModal.tsx)
🔧 Schritt 2 – Bild vor dem Upload komprimieren (max. 0.5MB, 600x600px):
Installieren (falls nicht da):

bash
Kopieren
Bearbeiten
npm install browser-image-compression
Dann im Code:

ts
Kopieren
Bearbeiten
import imageCompression from "browser-image-compression";

const compressImage = async (file: File): Promise<File> => {
  const options = {
    maxSizeMB: 0.5,
    maxWidthOrHeight: 600,
    useWebWorker: true,
  };
  return await imageCompression(file, options);
};
🔧 Schritt 3 – Upload korrekt vor dem Speichern durchführen:
tsx
Kopieren
Bearbeiten
const handleSave = async () => {
  setSaving(true);
  try {
    let avatarUrl = currentUser.avatarUrl;

    if (selectedFile) {
      const compressed = await compressImage(selectedFile);
      avatarUrl = await uploadUserAvatar(compressed, currentUser.uid);
    }

    await updateUserProfile(currentUser.uid, {
      username,
      location,
      avatarUrl,
    });

    toast({ title: "Profil gespeichert." });
  } catch (err) {
    console.error("Fehler beim Speichern", err);
    toast({ title: "Fehler beim Speichern", description: err.message });
  } finally {
    setSaving(false);
  }
};
💡 Hinweise:
uploadUserAvatar() arbeitet jetzt direkt mit echten Dateien (Blob), nicht mit base64.

Nur die URL wird in Firestore gespeichert → keine 1MB-Grenze mehr.

Kompression reduziert Dateigröße ohne visuelle Einbußen, ideal für mobile Nutzung.